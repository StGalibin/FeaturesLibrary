
#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрограммноСоздаюОрганизацию(Парам01)","ЯПрограммноСоздаюОрганизацию","Когда Я программно создаю организацию ""Тестовая организация""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрограммноСоздаюУчетнуюПолитикуОрганизации(Парам01)","ЯПрограммноСоздаюУчетнуюПолитикуОрганизации","И я программно создаю учетную политику организации ""Тестовая организация""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрограммноСоздаюПодразделение(Парам01)","ЯПрограммноСоздаюПодразделение","Когда я программно создаю подразделение ""Тестовое подразделение""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрограммноСоздаюОптовыйСкладССистемойУчета(Парам01,Парам02)","ЯПрограммноСоздаюОптовыйСкладССистемойУчета","Когда я программно создаю оптовый склад ""Тестовый оптовый склад"" с системой учета ""Простой""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрограммноСоздаюМагазинССистемойУчета(Парам01,Парам02)","ЯПрограммноСоздаюМагазинССистемойУчета","Когда я программно создаю магазин ""Тестовый магазин"" с системой учета ""Простая""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрограммноСозданиюВидНоменклатуры(Парам01)","ЯПрограммноСозданиюВидНоменклатуры","Когда я программно созданию вид номенклатуры ""Тестовый вид номенклатуры""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрограммноСоздаюНоменклатуруВида(Парам01,Парам02)","ЯПрограммноСоздаюНоменклатуруВида","Когда я программно создаю номенклатуру ""Тестовая номенклатура"" вида ""Тестовый вид номенклатуры""","","");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда Я программно создаю организацию "Тестовая организация"
//@ЯПрограммноСоздаюОрганизацию(Парам01)
Процедура ЯПрограммноСоздаюОрганизацию(Наименование) Экспорт
		
	
ЯПрограммноСоздаюОрганизациюНаСервере(Наименование);

	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ЯПрограммноСоздаюОрганизациюНаСервере(Знач Наименование)
		
		Если Справочники.Организации.НайтиПоНаименованию(Наименование) = Справочники.Организации.ПустаяСсылка()	
			Тогда
			
			Попытка
				
				СправочникОбъект = Справочники.Организации.СоздатьЭлемент();
				СправочникОбъект.Наименование = Наименование;
				СправочникОбъект.НаименованиеПолное = Наименование;
				СправочникОбъект.НаименованиеСокращенное = Наименование;
				СправочникОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				СправочникОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо; 
				СправочникОбъект.Префикс = "ТО";
				СправочникОбъект.Записать();
					
			Исключение
				
				Инфо = ИнформацияОбОшибке();
				
				ВызватьИсключение(Инфо.Описание);
				
			КонецПопытки;
			
		КонецЕсли;

КонецПроцедуры

&НаКлиенте
//И я программно создаю учетную политику организации "Тестовая организация"
//@ЯПрограммноСоздаюУчетнуюПолитикуОрганизации(Парам01)
Процедура ЯПрограммноСоздаюУчетнуюПолитикуОрганизации(НаименованиеОрганизации) Экспорт
	
	ЯПрограммноСоздаюУчетнуюПолитикуОрганизацииНаСервере(НаименованиеОрганизации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЯПрограммноСоздаюУчетнуюПолитикуОрганизацииНаСервере(НаименованиеОрганизации)
	
	Организация = Справочники.Организации.НайтиПоНаименованию(НаименованиеОрганизации);
	
	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
		
		ВызватьИсключение("Организация не найдена!");
		
	КонецЕсли;
	
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Установить(Организация); 
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Попытка
			
			НачатьТранзакцию();
			
			УчетнаяПолитикаОбъект = Справочники.УчетныеПолитикиОрганизаций.СоздатьЭлемент();
			УчетнаяПолитикаОбъект.Наименование = "Тестовая учетная политика";
			УчетнаяПолитикаОбъект.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОВзвешеннаяОценка;
			УчетнаяПолитикаОбъект.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
			
			УчетнаяПолитикаОбъект.Записать();
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			
			НоваяЗапись.Организация = Организация; 
			НоваяЗапись.Период = НачалоГода(ТекущаяДата());
			НоваяЗапись.УчетнаяПолитика = УчетнаяПолитикаОбъект.Ссылка;
			
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			
			ОтменитьТранзакцию();
			
			ВызватьИсключение(Инфо.Описание);
			
		КонецПопытки;
		
		
	КонецЕсли;
	
КонецПроцедуры // ()

&НаКлиенте
//Когда я программно создаю подразделение "Тестовое подразделение"
//@ЯПрограммноСоздаюПодразделение(Парам01)
Процедура ЯПрограммноСоздаюПодразделение(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Когда я программно создаю оптовый склад "Тестовый оптовый склад" с системой учета "Простой"
//@ЯПрограммноСоздаюОптовыйСкладССистемойУчета(Парам01,Парам02)
Процедура ЯПрограммноСоздаюОптовыйСкладССистемойУчета(Парам01,Парам02) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Когда я программно создаю магазин "Тестовый магазин" с системой учета "Простая"
//@ЯПрограммноСоздаюМагазинССистемойУчета(Парам01,Парам02)
Процедура ЯПрограммноСоздаюМагазинССистемойУчета(Парам01,Парам02) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Когда я программно созданию вид номенклатуры "Тестовый вид номенклатуры"
//@ЯПрограммноСозданиюВидНоменклатуры(Парам01)
Процедура ЯПрограммноСозданиюВидНоменклатуры(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Когда я программно создаю номенклатуру "Тестовая номенклатура" вида "Тестовый вид номенклатуры"
//@ЯПрограммноСоздаюНоменклатуруВида(Парам01,Парам02)
Процедура ЯПрограммноСоздаюНоменклатуруВида(Парам01,Парам02) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры
